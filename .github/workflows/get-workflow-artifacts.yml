name: Get Workflow Artifacts

on:
  workflow_dispatch:
  
jobs:
  build-test-branch:
    name: "Build and Test"

    runs-on: ubuntu-latest
    
    steps:

    #- name: Make PR Fail
    #  run: exit 1

    - uses: actions/checkout@v2
    
          
    - name: Setup .NET Core 5
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    
    - name: Install dependencies
      run: dotnet restore "${{ github.workspace }}/mywebapp/mywebapp.sln"
    
    - name: Build
      run: dotnet build "${{ github.workspace }}/mywebapp/mywebapp.sln" --configuration Release --no-restore
    
    - name: Test
      run: |
        dotnet test "${{ github.workspace }}/mywebapp/mywebapp.sln" --no-restore --verbosity normal  --logger "trx;LogFileName=test-results.trx"
    - name: Test Report
      uses: dorny/test-reporter@v1.5.0
      if: success() || failure()    # run this step even if previous step failed
      with:
        name: XUnit Tests            # Name of the check run which will be created
        path: ${{ github.workspace }}/mywebapp/tests/TestResults/*.trx    # Path to test results
        reporter: dotnet-trx
      
    - name: Publish
      run: |
        dotnet publish "${{ github.workspace }}/mywebapp/src/mywebapp.csproj" -c Release -o mywebapp
    
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.0
      with:
        # Artifact name
        name: mywebappbuildartifacts
        # A file, directory or wildcard pattern that describes what to upload
        path: mywebapp/**
        # The desired behavior if no files are found using the provided path.
        if-no-files-found: error
        # Duration after which artifact will expire in days. 0 means using default retention.
        retention-days: 90
        
  get-artifacts:
    name: "Get Artifacts"

    runs-on: ubuntu-latest
    
    needs:
      - build-test-branch
    
    steps:

    - name: output run id
      run: echo ${{ github.run_id }}
      
    - name: download artifact
      run: |
        GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}    # Github Personal Access token passed from user
        GITHUB_ORG='mickeygoussetorg'       # Name of the GitHub.com Organization to create new repository
        GITHUB_REPO='intro-to-github-actions-talk'      # Name of the Github.com Repository to create
        GITHUB_API='https://api.github.com' # API endpoint for GitHub
        RUN_ID=${{ github.run_id }}
        
        echo "Please Work"
        echo "$GITHUB_API/repos/$GITHUB_ORG/$GITHUB_REPO/actions/runs/$RUN_ID/artifacts"
        
        # Get the artifact list
        ARTIFACTS=$(curl --fail -X GET --url "$GITHUB_API/repos/$GITHUB_ORG/$GITHUB_REPO/actions/runs/$RUN_ID/artifacts" -H 'Accept: application/vnd.github.v3+json' -H "authorization: Bearer ${{ secrets.GH_PAT }}" -H 'content-type: application/json')
        
        echo "So did I get anythign back from my curl"
        echo $ARTIFACTS
        
        DOWNLOAD_URL=$(echo $ARTIFACTS | jq '.artifacts | map(select(.name=="mywebappbuildartifacts")) | .[0] | .archive_download_url' )
        DOWNLOAD_URL=$(sed -e 's/^"//' -e 's/"$//' <<<"$DOWNLOAD_URL")
        echo $DOWNLOAD_URL
        echo "-------"
        curl -O -J -L \
          --url $DOWNLOAD_URL \
          -H 'Accept: application/vnd.github.v3+json' \
          -H "authorization: Bearer $GITHUB_TOKEN" \
          -H 'content-type: application/json'
          
    - name: ls
      run: ls -la
